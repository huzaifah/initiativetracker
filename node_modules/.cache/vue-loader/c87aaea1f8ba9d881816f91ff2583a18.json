{"remainingRequest":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/src/pages/Dashboard/Forms/Reports.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/src/pages/Dashboard/Forms/Reports.vue","mtime":1559288244457},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport JqxBarGauge from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxbargauge.vue\";\nimport JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid\";\nimport JqxButton from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons\";\n\nimport { mapState, mapMutations, mapActions } from \"vuex\";\n\nexport default {\n  components: {\n    //JqxBarGauge,\n    JqxGrid,\n    JqxButton\n  },\n  computed: {\n    ...mapState({\n      tableData: state => state.store.lines\n    })\n  },\n  data: function() {\n    return {\n      //values: [10, 20, 30, 40, 50],\n      getWidth: \"100%\",\n      dataAdapter: new jqx.dataAdapter(this.source),\n      columns: [\n        { text: \"Year\", datafield: \"year\", width: \"10%\" },\n        { text: \"Strategy\", datafield: \"strategy\", width: \"30%\" },\n        { text: \"Sector\", datafield: \"sector\", width: \"30%\" },\n        { text: \"Status\", datafield: \"status\", width: \"30%\" }\n      ]\n    };\n  },\n  beforeCreate: function() {\n    // Add here any data where you want to transform before components be rendered\n    this.source = {\n      datatype: \"array\",\n      datafields: [\n        { name: \"year\", type: \"string\" },\n        { name: \"strategy\", type: \"string\" },\n        { name: \"sector\", type: \"string\" },\n        { name: \"status\", type: \"string\" }\n      ],\n      id: \"id\"\n    };\n  },\n  created: function() {\n    this.source.localdata = this.tableData;\n    //this.$refs.grid.updatebounddata();\n  },\n  methods: {\n    formatFunction: function(value, index, color) {\n      return color;\n    },\n    onPageChanged: function() {\n      let info = this.$refs.grid.getpagingininformation();\n      alert(info);\n    },\n    excelBtnOnClick: function() {\n      this.$refs.grid.exportdata(\"xls\", \"initiative-list\");\n    },\n    clearFiltering: function() {\n      this.$refs.grid.clearfilters();\n    }\n  }\n};\n",{"version":3,"sources":["Reports.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Reports.vue","sourceRoot":"src/pages/Dashboard/Forms","sourcesContent":["<template>\n  <div class=\"md-layout\">\n    <div class=\"md-layout-item\">\n      <md-card>\n        <md-card-header class=\"md-card-header-icon md-card-header-green\">\n          <div class=\"card-icon\">\n            <md-icon>assignment</md-icon>\n          </div>\n          <h4 class=\"title\">Report - Initiative</h4>\n        </md-card-header>\n        <md-card-content>\n          <JqxGrid\n            ref=\"grid\"\n            :width=\"getWidth\"\n            :source=\"dataAdapter\"\n            :columns=\"columns\"\n            :columnsresize=\"true\"\n            :pageable=\"true\"\n            :groupable=\"true\"\n            :sortable=\"true\"\n            :filterable=\"true\"\n            :altrows=\"true\"\n            :autoshowfiltericon=\"true\"\n            :filtermode=\"'excel'\"\n            :groups=\"['year']\"\n          ></JqxGrid>\n        </md-card-content>\n        <md-card-actions md-alignment=\"left\">\n          <JqxButton @click=\"excelBtnOnClick()\">Export to Excel</JqxButton>\n          <JqxButton @click=\"clearFiltering()\">Remove Filter</JqxButton>\n        </md-card-actions>\n      </md-card>\n    </div>\n  </div>\n</template>\n<script>\nimport JqxBarGauge from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxbargauge.vue\";\nimport JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid\";\nimport JqxButton from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons\";\n\nimport { mapState, mapMutations, mapActions } from \"vuex\";\n\nexport default {\n  components: {\n    //JqxBarGauge,\n    JqxGrid,\n    JqxButton\n  },\n  computed: {\n    ...mapState({\n      tableData: state => state.store.lines\n    })\n  },\n  data: function() {\n    return {\n      //values: [10, 20, 30, 40, 50],\n      getWidth: \"100%\",\n      dataAdapter: new jqx.dataAdapter(this.source),\n      columns: [\n        { text: \"Year\", datafield: \"year\", width: \"10%\" },\n        { text: \"Strategy\", datafield: \"strategy\", width: \"30%\" },\n        { text: \"Sector\", datafield: \"sector\", width: \"30%\" },\n        { text: \"Status\", datafield: \"status\", width: \"30%\" }\n      ]\n    };\n  },\n  beforeCreate: function() {\n    // Add here any data where you want to transform before components be rendered\n    this.source = {\n      datatype: \"array\",\n      datafields: [\n        { name: \"year\", type: \"string\" },\n        { name: \"strategy\", type: \"string\" },\n        { name: \"sector\", type: \"string\" },\n        { name: \"status\", type: \"string\" }\n      ],\n      id: \"id\"\n    };\n  },\n  created: function() {\n    this.source.localdata = this.tableData;\n    //this.$refs.grid.updatebounddata();\n  },\n  methods: {\n    formatFunction: function(value, index, color) {\n      return color;\n    },\n    onPageChanged: function() {\n      let info = this.$refs.grid.getpagingininformation();\n      alert(info);\n    },\n    excelBtnOnClick: function() {\n      this.$refs.grid.exportdata(\"xls\", \"initiative-list\");\n    },\n    clearFiltering: function() {\n      this.$refs.grid.clearfilters();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.md-card .md-card-actions {\n  border: none;\n}\n\n.md-inline-checkboxes {\n  display: inline-flex;\n\n  .md-checkbox {\n    margin-top: 15px !important;\n  }\n}\n\n.md-checkbox,\n.md-radio {\n  margin-top: 15px;\n  margin-bottom: 0.5rem;\n}\n\n.md-checkbox,\n.md-radio {\n  display: flex;\n}\n\n.md-radio /deep/ .md-radio-container {\n  margin-left: 5px;\n  position: relative;\n  left: -3px;\n}\n\n.md-form-label + .md-layout-item .md-checkbox:not(:first-child),\n.md-form-label + .md-layout-item + .md-layout-item .md-radio:not(:first-child),\n.md-form-label + .md-layout-item .md-radio {\n  margin-top: 0;\n}\n\n.form-control-static {\n  margin-top: 6px;\n}\n</style>\n"]}]}