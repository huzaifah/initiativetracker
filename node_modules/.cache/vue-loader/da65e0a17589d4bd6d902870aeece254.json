{"remainingRequest":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/src/pages/Dashboard/Forms/Wizard/SecondStep.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/src/pages/Dashboard/Forms/Wizard/SecondStep.vue","mtime":1557211830984},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { IconCheckbox, Modal } from \"@/components\";\nimport { Pagination } from \"@/components\";\nimport targets from \"./targets\";\nimport Fuse from \"fuse.js\";\nimport Swal from \"sweetalert2\";\nimport moment from \"moment\";\n\nexport default {\n  components: {\n    IconCheckbox,\n    Modal\n  },\n  computed: {\n    /***\n     * Returns a page from the searched data or the whole data. Search is performed in the watch section below\n     */\n    queriedData() {\n      let result = this.tableData;\n      if (this.searchedData.length > 0) {\n        result = this.searchedData;\n      }\n      return result.slice(this.from, this.to);\n    },\n    to() {\n      let highBound = this.from + this.pagination.perPage;\n      if (this.total < highBound) {\n        highBound = this.total;\n      }\n      return highBound;\n    },\n    from() {\n      return this.pagination.perPage * (this.pagination.currentPage - 1);\n    },\n    total() {\n      return this.searchedData.length > 0\n        ? this.searchedData.length\n        : this.tableData.length;\n    }\n  },\n  data() {\n    return {\n      currentSort: \"name\",\n      currentSortOrder: \"asc\",\n      pagination: {\n        perPage: 5,\n        currentPage: 1,\n        perPageOptions: [5, 10, 25, 50],\n        total: 0\n      },\n      footerTable: [\"Quarter\", \"From\", \"To\", \"Target\", \"Actions\"],\n      searchQuery: \"\",\n      propsToSearch: [\"quarterYear\", \"from\", \"to\", \"target\"],\n      tableData: targets,\n      searchedData: [],\n      fuseSearch: null,\n      showDialog: false,\n      fromModal: null,\n      toModal: null,\n      year: null,\n      target: \"\",\n      quarter: null,\n      itemId: null\n    };\n  },\n  methods: {\n    displayAddNew() {\n      this.fromModal = moment().format(\"YYYY/MM/DD\");\n      this.toModal = moment().format(\"YYYY/MM/DD\");\n      this.year = null;\n      this.target = null;\n      this.quarter = null;\n      this.itemId = null;\n      this.showDialog = true;\n    },\n    modalClick() {\n      this.showDialog = false;\n\n      if (this.itemId == null) {\n        this.tableData.push({\n          id: targets.length + 1,\n          quarterYear: `${this.quarter} ${this.year}`,\n          quarter: this.quarter,\n          year: this.year,\n          from: moment(this.fromModal).format(\"D MMM YYYY\"),\n          to: moment(this.toModal).format(\"D MMM YYYY\"),\n          target: this.target\n        });\n      } else {\n        let indexToUpdate = this.tableData.findIndex(\n          tableRow => tableRow.id === this.itemId\n        );\n\n        if (indexToUpdate >= 0) {\n          this.tableData.splice(indexToUpdate, 1);\n        }\n\n        this.tableData.push({\n          id: this.itemId,\n          quarterYear: `${this.quarter} ${this.year}`,\n          quarter: this.quarter,\n          year: this.year,\n          from: moment(this.fromModal).format(\"D MMM YYYY\"),\n          to: moment(this.toModal).format(\"D MMM YYYY\"),\n          target: this.target\n        });\n      }\n    },\n    validate() {\n      this.$emit(\"on-validated\", true, this.model);\n      return Promise.resolve(true);\n    },\n    customSort(value) {\n      return value.sort((a, b) => {\n        const sortBy = this.currentSort;\n        if (this.currentSortOrder === \"desc\") {\n          return a[sortBy].localeCompare(b[sortBy]);\n        }\n        return b[sortBy].localeCompare(a[sortBy]);\n      });\n    },\n    handleLike(item) {\n      Swal.fire({\n        title: `You liked ${item.name}`,\n        buttonsStyling: false,\n        type: \"success\",\n        confirmButtonClass: \"md-button md-success\"\n      });\n    },\n    handleEdit(item) {\n      this.quarter = item.quarter;\n      this.year = item.year;\n      this.fromModal = moment(item.from, \"D MMM YYYY\").format(\"YYYY/MM/DD\");\n      this.toModal = moment(item.to, \"D MMM YYYY\").format(\"YYYY/MM/DD\");\n      this.target = item.target;\n      this.itemId = item.id;\n      this.showDialog = true;\n    },\n    handleDelete(item) {\n      Swal.fire({\n        title: \"Are you sure?\",\n        text: `You won't be able to revert this!`,\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonClass: \"md-button md-success btn-fill\",\n        cancelButtonClass: \"md-button md-danger btn-fill\",\n        confirmButtonText: \"Yes, delete it!\",\n        buttonsStyling: false\n      }).then(result => {\n        if (result.value) {\n          this.deleteRow(item);\n          Swal.fire({\n            title: \"Deleted!\",\n            text: `You deleted ${item.quarter}`,\n            type: \"success\",\n            confirmButtonClass: \"md-button md-success btn-fill\",\n            buttonsStyling: false\n          });\n        }\n      });\n    },\n    deleteRow(item) {\n      let indexToDelete = this.tableData.findIndex(\n        tableRow => tableRow.id === item.id\n      );\n      if (indexToDelete >= 0) {\n        this.tableData.splice(indexToDelete, 1);\n      }\n    }\n    \n  },\n  mounted() {\n    // Fuse search initialization.\n    this.fuseSearch = new Fuse(this.tableData, {\n      keys: [\"quarterYear\", \"target\"],\n      threshold: 0.3\n    });\n  },\n  watch: {\n    /**\n     * Searches through the table data by a given query.\n     * NOTE: If you have a lot of data, it's recommended to do the search on the Server Side and only display the results here.\n     * @param value of the query\n     */\n    searchQuery(value) {\n      let result = this.tableData;\n      if (value !== \"\") {\n        result = this.fuseSearch.search(this.searchQuery);\n      }\n      this.searchedData = result;\n    }\n  }\n};\n",{"version":3,"sources":["SecondStep.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"SecondStep.vue","sourceRoot":"src/pages/Dashboard/Forms/Wizard","sourcesContent":["<template>\n  <div>\n    <div class=\"md-layout\">\n      <md-button class=\"md-success\" @click=\"displayAddNew()\">Add New</md-button>\n\n      <md-dialog :md-active.sync=\"showDialog\" style=\"width: 1000px;\">\n        <md-dialog-title>Set Target</md-dialog-title>\n\n        <md-dialog-content>\n          <md-datepicker v-model=\"fromModal\" md-immediately>\n            <label>From date</label>\n          </md-datepicker>\n\n          <md-datepicker v-model=\"toModal\" md-immediately>\n            <label>To date</label>\n          </md-datepicker>\n\n          <md-field>\n            <label for=\"quarter\">Quarter</label>\n            <md-select v-model=\"quarter\" name=\"quarter\" id=\"quarter\">\n              <md-option value=\"Quarter 1\">Quarter 1</md-option>\n              <md-option value=\"Quarter 2\">Quarter 2</md-option>\n              <md-option value=\"Quarter 3\">Quarter 3</md-option>\n              <md-option value=\"Quarter 4\">Quarter 4</md-option>\n            </md-select>\n          </md-field>\n\n          <md-field>\n            <label for=\"year\">Year</label>\n            <md-select v-model=\"year\" name=\"year\" id=\"year\">\n              <md-option value=\"2018\">2018</md-option>\n              <md-option value=\"2019\">2019</md-option>\n              <md-option value=\"2020\">2020</md-option>\n            </md-select>\n          </md-field>\n\n          <md-field>\n            <label>Target</label>\n            <md-textarea v-model=\"target\"></md-textarea>\n          </md-field>\n        </md-dialog-content>\n\n        <md-dialog-actions>\n          <md-button class=\"md-danger\" @click=\"showDialog = false\">Close</md-button>\n          <md-button class=\"md-success\" @click=\"modalClick()\">Save</md-button>\n        </md-dialog-actions>\n      </md-dialog>\n\n      <md-table\n        :value=\"queriedData\"\n        :md-sort.sync=\"currentSort\"\n        :md-sort-order.sync=\"currentSortOrder\"\n        :md-sort-fn=\"customSort\"\n        class=\"paginated-table table-striped table-hover\"\n      >\n        <md-table-toolbar>\n          <md-field>\n            <label for=\"pages\">Per page</label>\n            <md-select v-model=\"pagination.perPage\" name=\"pages\">\n              <md-option\n                v-for=\"item in pagination.perPageOptions\"\n                :key=\"item\"\n                :label=\"item\"\n                :value=\"item\"\n              >{{ item }}</md-option>\n            </md-select>\n          </md-field>\n\n          <md-field>\n            <md-input\n              type=\"search\"\n              class=\"mb-3\"\n              clearable\n              style=\"width: 200px\"\n              placeholder=\"Search records\"\n              v-model=\"searchQuery\"\n            ></md-input>\n          </md-field>\n        </md-table-toolbar>\n\n        <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\">\n          <md-table-cell md-label=\"Quarter\">{{ item.quarterYear }}</md-table-cell>\n          <md-table-cell md-label=\"From\">{{ item.from }}</md-table-cell>\n          <md-table-cell md-label=\"To\">{{ item.to }}</md-table-cell>\n          <md-table-cell md-label=\"Target\">{{ item.target }}</md-table-cell>\n\n          <md-table-cell md-label=\"Actions\">\n            <md-button class=\"md-just-icon md-warning md-simple\" @click.native=\"handleEdit(item)\">\n              <md-icon>dvr</md-icon>\n            </md-button>\n            <md-button class=\"md-just-icon md-danger md-simple\" @click.native=\"handleDelete(item)\">\n              <md-icon>close</md-icon>\n            </md-button>\n          </md-table-cell>\n        </md-table-row>\n      </md-table>\n    </div>\n  </div>\n</template>\n<script>\nimport { IconCheckbox, Modal } from \"@/components\";\nimport { Pagination } from \"@/components\";\nimport targets from \"./targets\";\nimport Fuse from \"fuse.js\";\nimport Swal from \"sweetalert2\";\nimport moment from \"moment\";\n\nexport default {\n  components: {\n    IconCheckbox,\n    Modal\n  },\n  computed: {\n    /***\n     * Returns a page from the searched data or the whole data. Search is performed in the watch section below\n     */\n    queriedData() {\n      let result = this.tableData;\n      if (this.searchedData.length > 0) {\n        result = this.searchedData;\n      }\n      return result.slice(this.from, this.to);\n    },\n    to() {\n      let highBound = this.from + this.pagination.perPage;\n      if (this.total < highBound) {\n        highBound = this.total;\n      }\n      return highBound;\n    },\n    from() {\n      return this.pagination.perPage * (this.pagination.currentPage - 1);\n    },\n    total() {\n      return this.searchedData.length > 0\n        ? this.searchedData.length\n        : this.tableData.length;\n    }\n  },\n  data() {\n    return {\n      currentSort: \"name\",\n      currentSortOrder: \"asc\",\n      pagination: {\n        perPage: 5,\n        currentPage: 1,\n        perPageOptions: [5, 10, 25, 50],\n        total: 0\n      },\n      footerTable: [\"Quarter\", \"From\", \"To\", \"Target\", \"Actions\"],\n      searchQuery: \"\",\n      propsToSearch: [\"quarterYear\", \"from\", \"to\", \"target\"],\n      tableData: targets,\n      searchedData: [],\n      fuseSearch: null,\n      showDialog: false,\n      fromModal: null,\n      toModal: null,\n      year: null,\n      target: \"\",\n      quarter: null,\n      itemId: null\n    };\n  },\n  methods: {\n    displayAddNew() {\n      this.fromModal = moment().format(\"YYYY/MM/DD\");\n      this.toModal = moment().format(\"YYYY/MM/DD\");\n      this.year = null;\n      this.target = null;\n      this.quarter = null;\n      this.itemId = null;\n      this.showDialog = true;\n    },\n    modalClick() {\n      this.showDialog = false;\n\n      if (this.itemId == null) {\n        this.tableData.push({\n          id: targets.length + 1,\n          quarterYear: `${this.quarter} ${this.year}`,\n          quarter: this.quarter,\n          year: this.year,\n          from: moment(this.fromModal).format(\"D MMM YYYY\"),\n          to: moment(this.toModal).format(\"D MMM YYYY\"),\n          target: this.target\n        });\n      } else {\n        let indexToUpdate = this.tableData.findIndex(\n          tableRow => tableRow.id === this.itemId\n        );\n\n        if (indexToUpdate >= 0) {\n          this.tableData.splice(indexToUpdate, 1);\n        }\n\n        this.tableData.push({\n          id: this.itemId,\n          quarterYear: `${this.quarter} ${this.year}`,\n          quarter: this.quarter,\n          year: this.year,\n          from: moment(this.fromModal).format(\"D MMM YYYY\"),\n          to: moment(this.toModal).format(\"D MMM YYYY\"),\n          target: this.target\n        });\n      }\n    },\n    validate() {\n      this.$emit(\"on-validated\", true, this.model);\n      return Promise.resolve(true);\n    },\n    customSort(value) {\n      return value.sort((a, b) => {\n        const sortBy = this.currentSort;\n        if (this.currentSortOrder === \"desc\") {\n          return a[sortBy].localeCompare(b[sortBy]);\n        }\n        return b[sortBy].localeCompare(a[sortBy]);\n      });\n    },\n    handleLike(item) {\n      Swal.fire({\n        title: `You liked ${item.name}`,\n        buttonsStyling: false,\n        type: \"success\",\n        confirmButtonClass: \"md-button md-success\"\n      });\n    },\n    handleEdit(item) {\n      this.quarter = item.quarter;\n      this.year = item.year;\n      this.fromModal = moment(item.from, \"D MMM YYYY\").format(\"YYYY/MM/DD\");\n      this.toModal = moment(item.to, \"D MMM YYYY\").format(\"YYYY/MM/DD\");\n      this.target = item.target;\n      this.itemId = item.id;\n      this.showDialog = true;\n    },\n    handleDelete(item) {\n      Swal.fire({\n        title: \"Are you sure?\",\n        text: `You won't be able to revert this!`,\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonClass: \"md-button md-success btn-fill\",\n        cancelButtonClass: \"md-button md-danger btn-fill\",\n        confirmButtonText: \"Yes, delete it!\",\n        buttonsStyling: false\n      }).then(result => {\n        if (result.value) {\n          this.deleteRow(item);\n          Swal.fire({\n            title: \"Deleted!\",\n            text: `You deleted ${item.quarter}`,\n            type: \"success\",\n            confirmButtonClass: \"md-button md-success btn-fill\",\n            buttonsStyling: false\n          });\n        }\n      });\n    },\n    deleteRow(item) {\n      let indexToDelete = this.tableData.findIndex(\n        tableRow => tableRow.id === item.id\n      );\n      if (indexToDelete >= 0) {\n        this.tableData.splice(indexToDelete, 1);\n      }\n    }\n    \n  },\n  mounted() {\n    // Fuse search initialization.\n    this.fuseSearch = new Fuse(this.tableData, {\n      keys: [\"quarterYear\", \"target\"],\n      threshold: 0.3\n    });\n  },\n  watch: {\n    /**\n     * Searches through the table data by a given query.\n     * NOTE: If you have a lot of data, it's recommended to do the search on the Server Side and only display the results here.\n     * @param value of the query\n     */\n    searchQuery(value) {\n      let result = this.tableData;\n      if (value !== \"\") {\n        result = this.fuseSearch.search(this.searchQuery);\n      }\n      this.searchedData = result;\n    }\n  }\n};\n</script>\n<style></style>\n"]}]}