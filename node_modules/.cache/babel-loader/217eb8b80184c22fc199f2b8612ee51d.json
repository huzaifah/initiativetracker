{"remainingRequest":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/babel-loader/lib/index.js!/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/src/components/Cards/ChartCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/src/components/Cards/ChartCard.vue","mtime":1549899732000},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huzaifah/Downloads/vue-material-dashboard-pro-v1.2.0/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"chart-card\",\n  props: {\n    HeaderText: Boolean,\n    HeaderIcon: Boolean,\n    noFooter: Boolean,\n    chartInsideContent: Boolean,\n    chartInsideHeader: Boolean,\n    chartType: {\n      type: String,\n      default: \"Line\" // Line | Pie | Bar\n\n    },\n    headerAnimation: {\n      type: String,\n      default: \"true\"\n    },\n    chartOptions: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    chartResponsiveOptions: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    chartAnimation: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    chartData: {\n      type: Object,\n      default: function _default() {\n        return {\n          labels: [],\n          series: []\n        };\n      }\n    },\n    backgroundColor: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data: function data() {\n    return {\n      hoverCount: 0,\n      imgHovered: false,\n      fixedHeader: false,\n      chartId: \"no-id\"\n    };\n  },\n  computed: {\n    headerDown: function headerDown() {\n      return this.hoverCount > 15;\n    }\n  },\n  methods: {\n    headerBack: function headerBack() {\n      this.fixedHeader = false;\n    },\n    fixHeader: function fixHeader() {\n      this.hoverCount = 0;\n      this.fixedHeader = true;\n      setTimeout(this.headerBack, 480);\n    },\n    onMouseOver: function onMouseOver() {\n      if (this.headerAnimation === \"true\") {\n        this.imgHovered = true;\n        this.hoverCount++;\n      }\n    },\n    onMouseLeave: function onMouseLeave() {\n      if (this.headerAnimation === \"true\") {\n        this.imgHovered = false;\n      }\n    },\n    getClass: function getClass(backgroundColor) {\n      return \"md-card-header-\" + backgroundColor + \"\";\n    },\n\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart: function initChart() {\n      var chartIdQuery = \"#\".concat(this.chartId);\n      this.$Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions, this.chartAnimation);\n    },\n\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId: function updateChartId() {\n      var currentTime = new Date().getTime().toString();\n      var randomInt = this.getRandomInt(0, currentTime);\n      this.chartId = \"div_\".concat(randomInt);\n    },\n    getRandomInt: function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n  },\n  mounted: function mounted() {\n    this.updateChartId();\n    this.$nextTick(this.initChart);\n  }\n};",{"version":3,"sources":["ChartCard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <md-card\n    @mouseleave.native=\"onMouseLeave\"\n    :data-count=\"hoverCount\"\n    class=\"md-card-chart\"\n  >\n    <md-card-header\n      @mouseenter.native=\"onMouseOver\"\n      :data-header-animation=\"headerAnimation\"\n      :class=\"[\n        { hovered: imgHovered },\n        { hinge: headerDown },\n        { fadeInDown: fixedHeader },\n        { animated: true },\n        { [getClass(backgroundColor)]: true },\n        { 'md-card-header-text': HeaderText },\n        { 'md-card-header-icon': HeaderIcon }\n      ]\"\n    >\n      <div v-if=\"chartInsideHeader\" :id=\"chartId\" class=\"ct-chart\"></div>\n      <slot name=\"chartInsideHeader\"></slot>\n    </md-card-header>\n\n    <md-card-content>\n      <div v-if=\"chartInsideContent\" :id=\"chartId\" class=\"ct-chart\"></div>\n      <div\n        class=\"md-card-action-buttons text-center\"\n        v-if=\"headerAnimation === 'true'\"\n      >\n        <md-button\n          class=\"md-danger md-simple fix-broken-card\"\n          @click=\"fixHeader\"\n          v-if=\"headerDown\"\n        >\n          <slot name=\"fixed-button\"></slot> Fix Header!\n        </md-button>\n        <slot name=\"first-button\"></slot>\n        <slot name=\"second-button\"></slot>\n        <slot name=\"third-button\"></slot>\n      </div>\n      <slot name=\"content\"></slot>\n    </md-card-content>\n\n    <md-card-actions md-alignment=\"left\" v-if=\"!noFooter\">\n      <slot name=\"footer\"></slot>\n    </md-card-actions>\n  </md-card>\n</template>\n<script>\nexport default {\n  name: \"chart-card\",\n  props: {\n    HeaderText: Boolean,\n    HeaderIcon: Boolean,\n    noFooter: Boolean,\n    chartInsideContent: Boolean,\n    chartInsideHeader: Boolean,\n    chartType: {\n      type: String,\n      default: \"Line\" // Line | Pie | Bar\n    },\n    headerAnimation: {\n      type: String,\n      default: \"true\"\n    },\n    chartOptions: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    chartResponsiveOptions: {\n      type: Array,\n      default: () => {\n        return [];\n      }\n    },\n    chartAnimation: {\n      type: Array,\n      default: () => {\n        return [];\n      }\n    },\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          labels: [],\n          series: []\n        };\n      }\n    },\n    backgroundColor: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      hoverCount: 0,\n      imgHovered: false,\n      fixedHeader: false,\n      chartId: \"no-id\"\n    };\n  },\n  computed: {\n    headerDown() {\n      return this.hoverCount > 15;\n    }\n  },\n  methods: {\n    headerBack: function() {\n      this.fixedHeader = false;\n    },\n    fixHeader: function() {\n      this.hoverCount = 0;\n      this.fixedHeader = true;\n\n      setTimeout(this.headerBack, 480);\n    },\n    onMouseOver: function() {\n      if (this.headerAnimation === \"true\") {\n        this.imgHovered = true;\n        this.hoverCount++;\n      }\n    },\n    onMouseLeave: function() {\n      if (this.headerAnimation === \"true\") {\n        this.imgHovered = false;\n      }\n    },\n\n    getClass: function(backgroundColor) {\n      return \"md-card-header-\" + backgroundColor + \"\";\n    },\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart() {\n      var chartIdQuery = `#${this.chartId}`;\n      this.$Chartist[this.chartType](\n        chartIdQuery,\n        this.chartData,\n        this.chartOptions,\n        this.chartAnimation\n      );\n    },\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId() {\n      var currentTime = new Date().getTime().toString();\n      var randomInt = this.getRandomInt(0, currentTime);\n      this.chartId = `div_${randomInt}`;\n    },\n    getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n  },\n  mounted() {\n    this.updateChartId();\n    this.$nextTick(this.initChart);\n  }\n};\n</script>\n"],"sourceRoot":"src/components/Cards"}]}